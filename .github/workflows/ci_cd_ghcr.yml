name: CI + CD (GHCR + Container-Test)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-test:
    name: Run CI Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci || npm install

      - name: Run tests
        run: npm test

  build-run-verify-and-push:
    name: Build image → Run & verify container → Push to GHCR
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: read
      packages: write

    env:
      IMAGE: ghcr.io/${{ github.repository }}
      TAG_LATEST: latest
      TAG_SHA: sha-${{ github.sha }}
      APP_PORT: 8080        # passe an, falls deine App einen anderen Port nutzt
      HEALTH_URL: http://127.0.0.1:8080/health  # fallback unten prüft "/" falls /health nicht existiert

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Build (zwei Tags: latest + sha)
      - name: Build Docker image
        run: |
          docker build \
            -t "$IMAGE:$TAG_LATEST" \
            -t "$IMAGE:$TAG_SHA" \
            .

      # Container starten und testen
      - name: Run container (detached)
        run: |
          docker run -d --rm \
            --name app-under-test \
            -p 127.0.0.1:${APP_PORT}:${APP_PORT} \
            "$IMAGE:$TAG_SHA"

      - name: Verify container is responding
        run: |
          echo "Waiting for app to respond on $HEALTH_URL (fallback /)"
          for i in {1..25}; do
            if curl -fsS "$HEALTH_URL" >/dev/null 2>&1 || curl -fsS "http://127.0.0.1:${APP_PORT}/" >/dev/null 2>&1; then
              echo "✅ Container responded."
              exit 0
            fi
            sleep 1
          done
          echo "❌ App did not respond in time. Logs:" >&2
          docker logs app-under-test || true
          exit 1

      - name: Stop container
        if: always()
        run: docker rm -f app-under-test || true

      # Login & Push NUR wenn Test ok war
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push images (latest + sha)
        run: |
          docker push "$IMAGE:$TAG_LATEST"
          docker push "$IMAGE:$TAG_SHA"
